name: Python Tests

on: [ push, pull_request ]

permissions:
  contents: read
  packages: write
  id-token: write
  pages: write


jobs:
  test:
    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    name: Python tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set JAVA_HOME
        run: echo JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java)))) >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          export JAVA_HOME=$JAVA_HOME
          pytest ./tests --alluredir=allure-results --disable-warnings
        continue-on-error: true

      - name: Run Coverage
        if: ${{ always() }}
        run: |
          python -m packages.notifier.bot

      - name: Archive allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          retention-days: 1

  generate-report:
    runs-on: ubuntu-latest
    needs: test
    name: Generate report
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Install Allure CLI
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/2.29.0/allure-2.29.0.tgz
          sudo tar -xzf allure-2.29.0.tgz -C /opt/
          sudo ln -sf /opt/allure-2.29.0/bin/allure /usr/bin/allure

      - name: Download allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Validate allure results
        run: |
          if ! find allure-results -type f -name "*-result.json" | grep -q .; then
            echo "❌ No Allure results found. Skipping report generation."
            exit 1
          fi

      - name: Generate Allure report
        run: allure generate -c allure-results -o _site

      - name: Store report
        uses: actions/upload-artifact@v4
        with:
          name: _site
          path: _site
          retention-days: 1
          if-no-files-found: error


  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Publish report
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download site report
        uses: actions/download-artifact@v4
        with:
          name: _site
          path: _site

      - name: Validate report exists
        run: |
          if [ ! -s "_site/index.html" ]; then
            echo "❌ Report index.html not found. Cancelling publish."
            exit 1
          fi

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Show report URL
        run:
          echo "https://flower1power.github.io/API_Lessons/"
